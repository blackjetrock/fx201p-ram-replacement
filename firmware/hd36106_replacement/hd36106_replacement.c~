/**
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

////////////////////////////////////////////////////////////////////////////////
//
//  Tracer/LA for HD36106
//

////////////////////////////////////////////////////////////////////////////////
//
// On FX201P:
//
// CE high while transfers to lower (program) HD
// Data positive logic
//
// It looks like the HD36106 has an active low CE. Also, there are pulses on CE
// which have to be ignored, I think, as the CLKB(?) should be used to qualify the
// signal. 

#define INVERTED_CE     1

// Run a low level trace, just  raw signal dump
#define LOW_LEVEL_TRACE 1

// Single shot trae, don't repeatedly capture data
#define SINGLE_SHOT     0

// whether to display bus transations over USB, it can mess the CLI up
#define NO_TRACE_USB    1

////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>

#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "hardware/dma.h"
#include "hardware/structs/bus_ctrl.h"

#define DEBUG_STOP while(1) {}

// Some logic to analyse:
#include "hardware/structs/pwm.h"
#include "pico/multicore.h"
#include "pico/bootrom.h"

////////////////////////////////////////////////////////////////////////////////


const uint CAPTURE_PIN_BASE = 0;
const uint CAPTURE_PIN_COUNT = 32;
const uint CAPTURE_N_SAMPLES = 3000;

#define CLOCK_DIV  30.0f

const int P_A0     = 0;
const int P_DOUT   = 10;    // DOUT sense, for tracing

const int P_DOUTDRV = 12;   // DOUT that we drive
const int P_DOUTOE = 11;    // DOUT output enable

const int P_DIN    = 4;
const int P_RW     = 5;
const int P_CE     = 6;
const int P_CLKA   = 9;
const int P_CLKB   = 8;

const int P_CE2    = 14;
const int P_STAT1  = 16;

// Which clock we sample on
const int P_SAMPLE_CLK = P_CLKB;
  
#define READ_GPIO(NNN)          (((gpio_states = sio_hw->gpio_in) & (1 << NNN)) >> NNN)
#define CHECK_GPIO_STATE(NNN)   (((gpio_states                  ) & (1 << NNN)) >> NNN)
#define GET_GPIO_STATE(NNN)     (((gpio_states                  ) & (1 << NNN)) >> NNN)

#define ALL_HIGH 0xFFFFFFFFFFFFFFFF
#define GPIO_VALUE(XXX,NNN)     (((XXX) & (1 << NNN)) >> NNN)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Serial loop command structure

typedef void (*FPTR)(void);

typedef struct
{
  char key;
  char *desc;
  FPTR fn;
} SERIAL_COMMAND;

int keypress = 0;
int parameter = 0;

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//

#define NUM_BUS_T  1500

int queue_overflow = 0;

volatile int data_in = 0;
volatile int data_out = 0;

volatile int       bus_addr[NUM_BUS_T];
volatile uint64_t  bus_doutlo[NUM_BUS_T];
volatile uint64_t  bus_doutlo1[NUM_BUS_T];
volatile uint64_t  bus_doutlo2[NUM_BUS_T];
volatile uint64_t  bus_douthi[NUM_BUS_T];

volatile uint64_t  bus_datalo[NUM_BUS_T];
volatile uint64_t  bus_datalo1[NUM_BUS_T];
volatile uint64_t  bus_datalo2[NUM_BUS_T];
volatile uint64_t  bus_datahi[NUM_BUS_T];

volatile uint64_t  bus_rwlo[NUM_BUS_T];
volatile uint64_t  bus_rwlo1[NUM_BUS_T];
volatile uint64_t  bus_rwlo2[NUM_BUS_T];
volatile uint64_t  bus_rwhi[NUM_BUS_T];
volatile int       bus_ces[NUM_BUS_T];
volatile int       bus_clk_count[NUM_BUS_T];

int last_ce        = 0;
int last_ce2       = 0;
int last_clk       = 0;
uint64_t ce_cycle  = 0;
uint64_t ce2_cycle = 0;

int ce          = 0;
int ce2         = 0;
int trans_i     = 0;
int dout        = 0;
int din         = 0;
int rw          = 0;
int address     = 0;
int clk         = 0;
uint64_t doutlo = 0;
uint64_t douthi = 0;
volatile int stopped = 0;

uint64_t datalo = 0;
uint64_t data1  = 0;
uint64_t data2  = 0;
uint64_t datahi = 0;

uint64_t rwlo   = 0;
uint64_t rwhi   = 0;

#define NUM_DATA_BITS 256
int bit_din[NUM_DATA_BITS];
int bit_dout[NUM_DATA_BITS];
int bit_rw[NUM_DATA_BITS];

int clk_count   = 0;

volatile int loop_count  = 0;

////////////////////////////////////////////////////////////////////////////////

// RAM emulation data
#define RAM_SIZE  256

// Data is stored for all emulated RAMs as bytes
int ram_data[RAM_SIZE];

////////////////////////////////////////////////////////////////////////////////
  
uint64_t squash_part(int start, int bits[])
{
  uint64_t result = 0;

  for(int i=0;i<64; i++)
    {
      result <<= 1;
      result |= bits[start-i];
    }
  
  return(result);
}

uint64_t squash_lo(int bits[])
{
  return(squash_part(63, bits));
}

uint64_t squash_lo1(int bits[])
{
  return(squash_part(63+64+64, bits));
}

uint64_t squash_lo2(int bits[])
{
  return(squash_part(63+64, bits));
}

uint64_t squash_hi(int bits[])
{
  return(squash_part(63+64+64+64, bits));
}


void serial_help(void);

////////////////////////////////////////////////////////////////////////////////

void set_gpio_input(int gpio_pin)
{
  gpio_init(gpio_pin);
  gpio_set_dir(gpio_pin, GPIO_IN);
  gpio_set_pulls(gpio_pin, 0, 0);
}

void set_gpio_output(int gpio_pin)
{
  gpio_init(gpio_pin);
  gpio_set_dir(gpio_pin, GPIO_OUT);
  gpio_put(gpio_pin, 0);
}

////////////////////////////////////////////////////////////////////////////////

void display_ram(void)
{
  printf("\n");
  
  for(int z = 0; z<RAM_SIZE; z++)
    {
      int byte = 0;
      
      if( (z % 8) == 0)
	{
	  printf("\n%03X: ", z);
	}
      
      printf("%02X ", ram_data[z]);
      
    }
  
  printf("\n");
}

////////////////////////////////////////////////////////////////////////////////
//
//

#if 0

// Original tracer

void core1_main(void)
{
  int gpio_states = 0;
 
  irq_set_mask_enabled(0xffffffff, false);
    
  gpio_states = sio_hw->gpio_in;

#if INVERTED_CE
  last_ce = !((gpio_states & (1<<P_CE))>>P_CE);  
#else
  last_ce = (gpio_states & (1<<P_CE))>>P_CE;  
#endif
  
  while(1)
    {
      // Wait for either CE to have a falling edge
      loop_count++;
      
      // Wait while low
#if INVERTED_CE
      ce  = !(((gpio_states = sio_hw->gpio_in) & (1 << P_CE)) >> P_CE);
#else
      ce  = ((gpio_states = sio_hw->gpio_in) & (1 << P_CE)) >> P_CE;
#endif
      
      if(  (last_ce == 1) && (ce == 0) )
	{
	  // Capture address
	  address = (gpio_states & 0xF);
	  rw      = (gpio_states & (1<<P_RW))>>P_RW;
	  
	  // data is now clocked on the CLKB clock falling edge
	  // Clock data in until CE goes low

	  last_clk = ((gpio_states = sio_hw->gpio_in) & (1 << P_CLKB)) >> P_CLKB;
	  clk_count = 0;

	  
#if INVERTED_CE
	  while(  (ce  = ((gpio_states = sio_hw->gpio_in) & (1 << P_CE)) >> P_CE ))
#else
	    while( !(ce  = ((gpio_states = sio_hw->gpio_in) & (1 << P_CE)) >> P_CE ))
#endif	    
	      {
		// ce is still active
		clk = (gpio_states & (1<<P_CLKB))>>P_CLKB;

		if( (clk == 1 ) && (last_clk == 0) )
		  {
		    gpio_put(P_STAT1, 1);

		    din     = (gpio_states & (1<<P_DIN))  >> P_DIN;
		    rw      = (gpio_states & (1<<P_RW))   >> P_RW;
		    dout    = (gpio_states & (1<<P_DOUT)) >> P_DOUT;

		    gpio_put(P_STAT1, dout);

#if 0		  
		    // data can be up to 128 bits
		    uint64_t c = (datahi & (1LL<<0))>> 0;
		    datalo >>= 1;
		    datalo |= (c << 63);
		    datahi >>= 1;
		    datahi |= ((uint64_t)din << 63);

		    uint64_t rwc = (rwhi & (1LL<<0))>> 0;
		    rwlo >>= 1;
		    rwlo |= (rwc << 63);
		    rwhi >>= 1;
		    rwhi |= ((uint64_t)rw << 63);

		    uint64_t doutc = (douthi & (1LL<<0))>> 0;
		    doutlo >>= 1;
		    doutlo |= (doutc << 63);
		    douthi >>= 1;
		    douthi |= ((uint64_t)dout << 63);
#else
		    bit_din[clk_count] = din;
		    bit_dout[clk_count] = dout;
#endif
		  
		    gpio_put(P_STAT1, 0);
		    clk_count++;
		    if( clk_count >= NUM_DATA_BITS )
		      {
			clk_count = NUM_DATA_BITS -1;
		      }
		  }

		last_clk = clk;
	      }
	  
	  // A 56 bit frame has completed, we send some information to core0 so it can update
	  // the display and anything else it needs to
	  
	  bus_addr[data_in]      = address;
	  bus_clk_count[data_in] = clk_count;
#if 0
	  bus_datalo[data_in]    = datalo;
	  bus_datahi[data_in]    = datahi;
	  bus_doutlo[data_in]    = doutlo;
	  bus_douthi[data_in]    = douthi;
#else
	  bus_datalo[data_in]    = squash_lo(bit_din);
	  bus_datalo1[data_in]   = squash_lo1(bit_din);
	  bus_datalo2[data_in]   = squash_lo2(bit_din);
	  bus_datahi[data_in]    = squash_hi(bit_din);

	  bus_doutlo[data_in]    = squash_lo(bit_dout);
	  bus_doutlo1[data_in]   = squash_lo1(bit_dout);
	  bus_doutlo2[data_in]   = squash_lo2(bit_dout);
	  bus_douthi[data_in]    = squash_hi(bit_dout);
#endif

	  bus_ces[data_in]       = ce;
	  
	  address = 0;
	  datalo = 0;
	  datahi = 0;
	  douthi = 0;
	  doutlo = 0;
	  
	  int last_data_in = data_in;
	  
	  data_in = (data_in+1) % NUM_BUS_T;
	  
	  if( data_out == data_in )
	    {
	      // No space
	      queue_overflow = 1;
	      data_in = last_data_in ;
	    }
	  else
	    {
	    }
	}
      last_ce = ce;
    }      
  
}

////////////////////////////////////////////////////////////////////////////////

#else

#if LOW_LEVEL_TRACE

// Traces the GPIOs at every clock edge. Also stores data written in emulation RAM
// for both HD devices.

int last_sample_clk = 0;
int sample_clk = 0;

void core1_main(void)
{
  int gpio_states = 0;
  clk_count = 0;
  
  irq_set_mask_enabled(0xffffffff, false);
    
  gpio_states = sio_hw->gpio_in;

  last_ce = GET_GPIO_STATE(P_CE);
  last_ce2 = GET_GPIO_STATE(P_CE2);
  
  // We run round this look only when the sample clock edge is seen
  while(1)
    {
      loop_count++;

      // All samples of signals have to be done on an edge of a clock
      // Wait here until that edge appears
      last_sample_clk = READ_GPIO(P_SAMPLE_CLK);

      while(1)
	{
	  sample_clk = READ_GPIO(P_SAMPLE_CLK);

	  if( (last_sample_clk == 1) && (sample_clk == 0) )
	    {
	      break;
	    }
	  
	  last_sample_clk = sample_clk;
	}

      // Clock edge, process signals

      ce  = GET_GPIO_STATE(P_CE);
      ce2 = GET_GPIO_STATE(P_CE2);
      rw  = GET_GPIO_STATE(P_RW);
      
      // Check for CE falling edges
      if( (last_ce == 1) && (ce == 0 ))
	{
	  // reset cycle counter
	  ce_cycle = 0;
	}

      if( (last_ce2 == 1) && (ce2 == 0 ))
	{
	  // reset cycle counter
	  ce2_cycle = 0;
	}

      // Check for CE rising edges
      if( (last_ce == 0) && (ce == 1 ))
	{
	  // Disable DOUT as output
	  gpio_put(P_DOUTOE, 1);
	}

      if( (last_ce2 == 0) && (ce2 == 1 ))
	{
	  // Disable DOUT as output
	  gpio_put(P_DOUTOE, 1);
	}
      
      // We have gpio_states from the clock edge

      address = gpio_states;

      int addr = address & 0xF;
      
      // If ce is low and this is a write then write data bit to emulation RAM
      if( (ce==0) && (rw==0) )
	{
	  int bitno  = (ce_cycle & 0x7);
	  int byteno = (ce_cycle & 0x38) >> 3;
	  int din = GET_GPIO_STATE(P_DIN);

	  // Write bit
	  ram_data[(addr << 3)+byteno] &= ((1   << bitno) ^ 0xFF);
	  ram_data[(addr << 3)+byteno] |=  (din << bitno);
	}

      if( (ce2==0) && (rw==0) )
	{
	  int bitno  = (ce2_cycle & 0x7);
	  int byteno = (ce2_cycle & 0x38) >> 3;
	  int din = GET_GPIO_STATE(P_DIN);
	  
	  // Write bit
#if 1
	  ram_data[128+(addr << 3)+byteno] &= ((1   << bitno) ^ 0xFF);
	  ram_data[128+(addr << 3)+byteno] |= (din << bitno);
#else
	  ram_data[128+address] = 0x88;
#endif
#if 0
	  ram_data[128] = bitno;
	  ram_data[129] = byteno;
	  ram_data[130] = din;
#endif
	}

      // If CE is low and RW is high then this is a read.
      // We drive DOUT from now until the time that CE goes high
      if( (ce==0) && (rw==1) )
	{
	  int bitno  = (ce_cycle & 0x7);
	  int byteno = (ce_cycle & 0x38) >> 3;
	  int doutval = (ram_data[(addr << 3)+byteno] & (1 << bitno)) >> bitno;
	  
	  // Drive DOUT signal and drive the data level
	  gpio_put(P_DOUTOE, 0);
	  gpio_put(P_DOUTDRV, doutval);
	}

      if( (ce2==0) && (rw==1) )
	{
	  int bitno  = (ce2_cycle & 0x7);
	  int byteno = (ce2_cycle & 0x38) >> 3;
	  int doutval = (ram_data[128+(addr << 3)+byteno] & (1 << bitno)) >> bitno;
	  
	  // Drive DOUT signal and drive the data level
	  gpio_put(P_DOUTOE, 0);
	  gpio_put(P_DOUTDRV, doutval);
	}
	    
      // Capture GPIO states
      // Only capture writes
      if( (address & (1 <<P_CE2)) == 0 )
	{
	  bus_addr[data_in]      = address;
	  bus_clk_count[data_in] = clk_count;
	  
	  int last_data_in = data_in;
	  
	  data_in = (data_in+1) % NUM_BUS_T;
	  
	  if( data_out == data_in )
	    {
#if SINGLE_SHOT
	      // We have stopped tracing, sit in loop
	      printf("\nCore 1 has stopped.\n");
	      
	      stopped = 1;
	      while(stopped)
		{
		}
	      // Reset
	      data_in = 0;
	      data_out = 0;
	      
#else
	      // No space
	      queue_overflow = 1;
	      data_in = last_data_in ;
#endif
	    }
	  else
	    {
	    }
	}

      clk_count++;
      last_ce  = ce;
      last_ce2 = ce2;
      ce_cycle++;
      ce2_cycle++;
    }
  
  
}

#else

// Version of the tracer that uses a clock to determine when to sample signals.
// CE is ative low or high?

int last_sample_clk = 0;
int sample_clk = 0;

void core1_main(void)
{
  int gpio_states = 0;
 
  irq_set_mask_enabled(0xffffffff, false);
    
  gpio_states = sio_hw->gpio_in;

  // We run round this look only when the sample clock edge is seen
  while(1)
    {
      loop_count++;

      // All samples of signals have to be done on an edge of a clock
      // Wait here until that edge appears
      last_sample_clk = READ_GPIO(P_SAMPLE_CLK);

      while(1)
	{
	  sample_clk = READ_GPIO(P_SAMPLE_CLK);

	  if( (last_sample_clk == 0) && (sample_clk == 1) )
	    {
	      break;
	    }
	  
	  last_sample_clk = sample_clk;
	}

      // Clock edge, process signals
      // We have gpio_states from the clock edge

      // look for a rising edge on CE
      ce = CHECK_GPIO_STATE(P_CE);

      if( (last_ce == 0) && (ce == 1) )
	{
	  // Falling edge on CE so new accesses started
	  
	  // Capture address
	  address = (gpio_states & 0xF);

	  // reset the bit counter that is the data array index
	  clk_count = 0;
	}

      if( (last_ce == 1) && (ce == 0) )
	{
	  clk_count = 0;
	  
	  bus_addr[data_in]      = address;
	  bus_clk_count[data_in] = clk_count;
	  
	  bus_datalo[data_in]    = squash_lo(bit_din);
	  bus_datalo1[data_in]   = squash_lo1(bit_din);
	  bus_datalo2[data_in]   = squash_lo2(bit_din);
	  bus_datahi[data_in]    = squash_hi(bit_din);
	  
	  bus_doutlo[data_in]    = squash_lo(bit_dout);
	  bus_doutlo1[data_in]   = squash_lo1(bit_dout);
	  bus_doutlo2[data_in]   = squash_lo2(bit_dout);
	  bus_douthi[data_in]    = squash_hi(bit_dout);

	  bus_rwlo[data_in]      = squash_lo(bit_rw);
	  bus_rwlo1[data_in]     = squash_lo1(bit_rw);
	  bus_rwlo2[data_in]     = squash_lo2(bit_rw);
	  bus_rwhi[data_in]      = squash_hi(bit_rw);
	  
	  bus_ces[data_in]       = ce;
	  
	  address = 0;
	  datalo = 0;
	  datahi = 0;
	  douthi = 0;
	  doutlo = 0;
	  
	  int last_data_in = data_in;
	  
	  data_in = (data_in+1) % NUM_BUS_T;
	  
	  if( data_out == data_in )
	    {
	      // No space
	      queue_overflow = 1;
	      data_in = last_data_in ;
	    }
	  else
	    {
	    }
	}
      
      // We have a clock edge so if CE is active we capture data
      
      if( ce == 1 )
	{
	  gpio_put(P_STAT1, 1);
	  
	  din     = CHECK_GPIO_STATE(P_DIN);
	  rw      = CHECK_GPIO_STATE(P_RW);
	  dout    = CHECK_GPIO_STATE(P_DOUT);
	  
	  gpio_put(P_STAT1, din);

	  bit_din[clk_count]  = din;
	  bit_dout[clk_count] = dout;
	  bit_rw[clk_count]   = rw;
	  
	  gpio_put(P_STAT1, 0);


	  // If we have too many data bits, send this data to the other core and reset
	  // the counter so we can capture another block of data
	  
	  if( clk_count >= NUM_DATA_BITS )
	    {
	      clk_count = 0;

	      bus_addr[data_in]      = address;
	      bus_clk_count[data_in] = clk_count;

	      bus_datalo[data_in]    = squash_lo(bit_din);
	      bus_datalo1[data_in]   = squash_lo1(bit_din);
	      bus_datalo2[data_in]   = squash_lo2(bit_din);
	      bus_datahi[data_in]    = squash_hi(bit_din);

	      bus_doutlo[data_in]    = squash_lo(bit_dout);
	      bus_doutlo1[data_in]   = squash_lo1(bit_dout);
	      bus_doutlo2[data_in]   = squash_lo2(bit_dout);
	      bus_douthi[data_in]    = squash_hi(bit_dout);

  	      bus_rwlo[data_in]      = squash_lo(bit_rw);
 	      bus_rwlo1[data_in]     = squash_lo1(bit_rw);
	      bus_rwlo2[data_in]     = squash_lo2(bit_rw);
	      bus_rwhi[data_in]      = squash_hi(bit_rw);
	  
	      bus_ces[data_in]       = ce;
	  
	      address = 0;
	      datalo = 0;
	      datahi = 0;
	      douthi = 0;
	      doutlo = 0;
	  
	      int last_data_in = data_in;
	  
	      data_in = (data_in+1) % NUM_BUS_T;
	  
	      if( data_out == data_in )
		{
		  // No space
		  queue_overflow = 1;
		  data_in = last_data_in ;
		}
	      else
		{
		}
	      
	    }
	}

      clk_count++;
      last_clk = clk;
      last_ce = ce;
    }
}

#endif
#endif

////////////////////////////////////////////////////////////////////////////////

void process_bus1(void)
{
  //Process data coming in from the bus via core 1
  while( data_in != data_out )
    {
      if( bus_rwhi[data_out] != ALL_HIGH )
	{
	  printf("\nDATA=%016llX", bus_datahi[data_out]);
	}
      if( bus_rwlo[data_out] != ALL_HIGH )
	{
	  printf("\nDATA=%016llX", bus_datalo[data_out]);
	}
      if( bus_rwlo1[data_out] != ALL_HIGH )
	{
	  printf("\nDATA=%016llX", bus_datalo1[data_out]);
	}
      if( bus_rwlo2[data_out] != ALL_HIGH )
	{
	  printf("\nDATA=%016llX", bus_datalo2[data_out]);
	}
      
      data_out = (data_out + 1) % NUM_BUS_T;
    }
}

#if LOW_LEVEL_TRACE

////////////////////////////////////////////////////////////////////////////////
//
// Display low level signal trace
//
////////////////////////////////////////////////////////////////////////////////

// This is a simple dump of the GPIOs, decode here

void process_bus(void)
{
  //Process data coming in from the bus via core 1
  while( data_in != data_out )
    {
      int gpios = bus_addr[data_out];
      
      printf("\n%04d: CC:%08X AD:%01X DI:%01X DO: %01X CE: %01X CE2:%01X  RW:%01X",
	     data_out,
	     bus_clk_count[data_out],
	     gpios & 0xF,
	     GPIO_VALUE(gpios, P_DIN),
	     GPIO_VALUE(gpios, P_DOUT),
	     GPIO_VALUE(gpios, P_CE),
	     GPIO_VALUE(gpios, P_CE2),
	     GPIO_VALUE(gpios, P_RW)
	     );
      
      data_out = (data_out + 1) % NUM_BUS_T;
    }
}

#else

////////////////////////////////////////////////////////////////////////////////
//
// Display decoded trace
//
////////////////////////////////////////////////////////////////////////////////

void process_bus(void)
{
  //Process data coming in from the bus via core 1
  while( data_in != data_out )
    {
      if( 1 )
	{
	  printf("\n%04d: Addr:%01X DOUT:%016llX %016llX %016llX %016llX DIN:%016llX %016llX %016llX %016llX RW:%016llX %016llX %016llX %016llX CLKS:%d CE:%d",
		 data_out,
		 bus_addr[data_out],

		 bus_douthi[data_out],
		 bus_doutlo2[data_out],
		 bus_doutlo1[data_out],
		 bus_doutlo[data_out],

		 bus_datahi[data_out],
		 bus_datalo2[data_out],
		 bus_datalo1[data_out],
		 bus_datalo[data_out],

		 bus_rwhi[data_out],
		 bus_rwlo2[data_out],
		 bus_rwlo1[data_out],
		 bus_rwlo[data_out],
		 
		 bus_clk_count[data_out],
		 bus_ces[data_out]);
	}
      
      data_out = (data_out + 1) % NUM_BUS_T;
    }
}

#endif

////////////////////////////////////////////////////////////////////////////////

void cli_boot_mass(void)
{
  reset_usb_boot(0,0);
}

// Another digit pressed, update the parameter variable
void cli_digit(void)
{
  parameter *= 10;
  parameter += keypress-'0';
}

void cli_zero_parameter(void)
{
  parameter = 0;
}

void cli_set_address(void)
{
  address = parameter;
}

void cli_information(void)
{
  printf("\n");

  //  printf("\nNumber of reads  :%d", num_rd);
  //printf("\nNumber of writes :%d", num_wr);
  printf("\nNumber of loops: %d", loop_count);
  printf("\n");
}

void cli_start_tracing(void)
{
  stopped = 0;
}

////////////////////////////////////////////////////////////////////////////////

SERIAL_COMMAND serial_cmds[] =
  {
   {
    'h',
    "Serial command help",
    serial_help,
   },
   {
    '?',
    "Serial command help",
    serial_help,
   },
   {
    'I',
    "Information",
    cli_information,
   },
   {
    'd',
    "Display RAM",
    display_ram,
   },
   {
    '+',
    "Start tracing",
    cli_start_tracing,
   },
   {
    'z',
    "Zero parameter",
    cli_zero_parameter,
   },
   {
    'A',
    "Set Address",
    cli_set_address,
   },
   {
    '0',
    "*Digit",
    cli_digit,
   },
   {
    '1',
    "*Digit",
    cli_digit,
   },
   {
    '2',
    "*Digit",
    cli_digit,
   },
   {
    '3',
    "*Digit",
    cli_digit,
   },
   {
    '4',
    "*Digit",
    cli_digit,
   },
   {
    '5',
    "*Digit",
    cli_digit,
   },
   {
    '6',
    "*Digit",
    cli_digit,
   },
   {
    '7',
    "*Digit",
    cli_digit,
   },
   {
    '8',
    "*Digit",
    cli_digit,
   },
   {
    '9',
    "*Digit",
    cli_digit,
   },
   {
    '!',
    "Boot to mass storage",
    cli_boot_mass,
   },
  };


void serial_help(void)
{
  printf("\n");
  
  for(int i=0; i<sizeof(serial_cmds)/sizeof(SERIAL_COMMAND);i++)
    {
      if( *(serial_cmds[i].desc) != '*' )
	{
	  printf("\n%c:   %s", serial_cmds[i].key, serial_cmds[i].desc);
	}
    }
  printf("\n0-9: Enter parameter digit");
}


void prompt(void)
{
  printf("\n(Parameter:%d, Address:%d) >", parameter, address);
}



////////////////////////////////////////////////////////////////////////////////
//
// Serial CLI Handling
//
////////////////////////////////////////////////////////////////////////////////

int pcount = 0;
int periodic_read = 0;

void serial_loop()
{
  int  key;
  
  if( ((key = getchar_timeout_us(1000)) != PICO_ERROR_TIMEOUT))
    {
      for(int i=0; i<sizeof(serial_cmds)/sizeof(SERIAL_COMMAND);i++)
	{
	  if( serial_cmds[i].key == key )
	    {

	      keypress = key;
	      (*serial_cmds[i].fn)();
	      prompt();
	      break;
	    }
	}
    }
  else
    {
      // I have found that I need to send something if the serial USB times out
      // otherwise I get lockups on the serial communications.
      // So, if we get a timeout we send a spoace and backspace it. And
      // flush the stdio, but that didn't fix the problem but seems like a good idea.
      stdio_flush();
      printf(" \b");
    }
}


////////////////////////////////////////////////////////////////////////////////


int main()
{
  int gpio_states;
  
  
  ////////////////////////////////////////////////////////////////////////////////
  //
  // Overclock as needed
  //
  ////////////////////////////////////////////////////////////////////////////////
  
  //#define OVERCLOCK 135000
  //#define OVERCLOCK 200000
#define OVERCLOCK 270000
  //#define OVERCLOCK 360000
  
#if OVERCLOCK > 270000
  /* Above this speed needs increased voltage */
  vreg_set_voltage(VREG_VOLTAGE_1_20);
  sleep_ms(1000);
#endif
  
  /* Overclock */
  set_sys_clock_khz( OVERCLOCK, 1 );

  stdio_init_all();
  sleep_ms(2000);

  printf("\nHD36106 Tracer\n");
  printf("\nSetting GPIOs");
  
  // All GPIOs inputs
  
  for(int i=0;i<23; i++)
    {
      set_gpio_input(i);
    }

  // DOUT is done with two outputs
  set_gpio_output(P_DOUTDRV);
  set_gpio_output(P_DOUTOE);

  // Don't drive DOUT yet
  gpio_put(P_DOUTOE, 1);
  
  // Debug status blipper
  set_gpio_output(P_STAT1);
  
  set_gpio_input(26);
  set_gpio_input(27);
  set_gpio_input(28);

#if 0
  int clks;
  int last_clk = 0;
  int clk = 0;
  int loops = 0;
  
  while(1)
    {
      
      printf("\nLow ");
      clks = 0;
      loops = 0;
      while( !gpio_get(P_CE) )
	{
	  if( (clk = gpio_get(P_CLKB)) != last_clk)
	    {
	      clks++;
	    }
	  loops++;
	  last_clk = clk;
	}

      printf(" %d  L:%d", clks, loops);
      
      printf("\nHigh ");
      clks = 0;
      loops = 0;
      while( gpio_get(P_CE) )
	{
	  if( (clk = gpio_get(P_CLKB)) != last_clk)
	    {
	      clks++;
	    }
	  loops++;
	  last_clk = clk;
	}
      printf(" %d  L:%d", clks, loops);
    }
#endif

#if 0
  
  while(1)
    {
    }
#endif
  
  printf("\nStarting core1...");
  
  // Core 1 captures data and sends transactions to core 0 which
  // sends them over USB
  multicore_launch_core1(core1_main);

  printf("\nLooping...");
  
  // Sit in loop sending transatins to USB
  while(1)
    {
      serial_loop();

#if NO_TRACE_USB
#else
      process_bus();
#endif
    }
}
